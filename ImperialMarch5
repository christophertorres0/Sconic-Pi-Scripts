# NAME OF SONG: The Imperial March
# SHEET MUSIC: https://www.musicnotes.com/sheetmusic/mtd.asp?ppn=MN0017607
# BPM USED: https://songbpm.com/imperial-march?q=imperial%20march
use_bpm 95
s=0.25
#the variable "s" is for the sleep codes. This is assigned to each sleep code in the song so I am able to change the sleep time of all at one time and it won't sound weird.
a= 1
# the variable "a" is for the amplitude for the assigned samples
first = [:g4, :g4, :g4, :e4, :b4, :g4, :e4, :b4]
sleep = [4*s, 4*s, 4*s, 3*s, s, 4*s, 3*s, s]
index= 0
#this is the values for the play and sleep to play in the function "firstPart"
#each sleep code is going to be mulitplied by "s" which is 0.25 to get the right sleep time
define :firstPart do #This function defines the first part of the Imperial March song
  use_synth :saw
  8. times do
    play first[index]
    #"first" is the array with all my notes for the first part of my song. Index is the value of 0 for that variable. I say play the array name then the value or position of the first note which is :g4.
    sleep sleep[index]
    index= index+1
    #my variable "index" will add 1 to the value of index so it would play the next note and sleep time
  end
  index= 0 #after the 8 notes are played, the variable index will reset to 0
end
#I called this function to play 2 times by the function name "firstPart"
2. times do
  firstPart
end
#After the function "firstPart" plays 2 times, the live loop "bass" will play infinitely
live_loop :bass do
  with_fx :flanger do
    sample :bass_thick_c, rate: 0.5, cutoff: 70
    sleep 2*s
  end
end
#this live loop "fullMarch" will also start playing the same time as the "bass" loop and will play infinitely
live_loop :fullMarch do
  #the function "firstPart" will start playing then the rest of the song will be played
  firstPart
  play :g4
  sleep 4*s
  3. times do
    play :d5
    sleep 4*s
  end
  play :e5
  sleep 3*s
  play :b4
  sleep s
  play :g4
  sleep 4*s
  play :e4
  sleep 3*s
  play :b4
  sleep s
  play :g4
  sleep 4*s
  #at the end of the song, the tom high drum will play
  with_fx :flanger do
    r = (rrand 0.25, 1.5)
    sample :drum_tom_hi_hard, rate:r ,amp:a
    #the amp goes with the value "a" variable. It starts with 0.5 and gradually gets louder as the loop loops through
    print r
    #the rate for the sample will be randomized because it is linked to the variable "r" which will randomly pick a rate value from 0.5 to 1. Then it will print the r value on the log
  end
  sleep 4*s
  a= a+0.25 #at the end of the loop, the variable "a" will add 0.25 to it making it louder as the loop keeps repeating.
  print a #the "a" variable will display on the log
end
