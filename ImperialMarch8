# NAME OF SONG: The Imperial March
# SHEET MUSIC: https://www.musicnotes.com/sheetmusic/mtd.asp?ppn=MN0017607
# BPM USED: https://songbpm.com/imperial-march?q=imperial%20march
use_bpm 95
father = "C:/Users/koby_wu/Desktop/imperialmarch/father.wav"
luke = "C:/Users/koby_wu/Desktop/imperialmarch/Use The Force Luke.wav"
force = "C:/Users/koby_wu/Desktop/imperialmarch/force.wav"
obi = "C:/Users/koby_wu/Desktop/imperialmarch/obi.wav"
withyou = "C:/Users/koby_wu/Desktop/imperialmarch/withyou.wav"
#Number 12, these variable are the sample sounds that I have customly made.
s=0.25 #Number 8,the variable "s" is for the sleep codes. This is assigned to each sleep code in the song so I am able to change the sleep time of all at one time and it won't sound weird.
a= 0.25 #Number 8,the variable "a" is for the amplitude for the assigned samples
first = [:g4, :g4, :g4, :e4, :b4, :g4, :e4, :b4]
sleep = [4*s, 4*s, 4*s, 3*s, s, 4*s, 3*s, s]
index= 0
#Number 10, this is the values for the play and sleep to play in the function "firstPart". Each sleep code is going to be mulitplied by "s" which is 0.25 to get the right sleep time

#Number 13 These are the functions that hold to track code for it to be called in the live loops
define :notes do
  use_synth :prophet
  8. times do
    play first[index]
    #Number 10 "first" is the array with all my notes for the first part of my song. Index is the value of 0 for that variable. I say play the array name then the value or position of the first note which is :g4.
    sleep sleep[index]
    index= index+1
    #my variable "index" will add 1 to the value of index so it would play the next note and sleep time
  end
  index= 0 #after the 8 notes are played, the variable index will reset to 0
end
define :melody do
  notes
  sleep 10
end
define :background do
  16. times do
    with_fx :flanger do
      r = (rrand 2.5, 9.0)
      sample :drum_heavy_kick, amp:r
      print r
      sleep 1
      # Number 11 the amp for the sample will be randomized because it is linked to the variable "r" which will randomly pick a rate value from 2.5 to 9. Then it will print the r value on the log
    end
  end
end
define :bass do
  sample :bass_woodsy_c
  32. times do
    with_fx :distortion do
      sample :bass_thick_c, cutoff: 70, amp:a
      #Number 9, the amp variable "a" is going to start off with 0.25 and each time the loop full march goes, it addes 0.125
      sleep 2*s
    end
  end
  a= a+0.125
  print a
  #Number 9, at the end of the loop, the variable "a" will add 0.125 to it making it louder as the loop keeps repeating.
end
#Number 14, this function below is paramized function that is a placeholder for actual values
define :full_song do |f, t|
  play f
  sleep t
end
define :ending_notes do
  #Number 14 below I am using parameterized function to make my code more effiecent by calling the "full_song" function and calling the notes/sleep
  sleep 6
  full_song :g4, 4*s
  3. times do #Number 5 to avoid repeating the same note 3 times, it is in a loop
    full_song:d5, 4*s
  end
  full_song :e5, 3*s
  full_song :b4, s
  full_song :g4, 4*s
  full_song :e4, 3*s
  full_song :b4, s
  full_song :g4, 4*s
  sleep 2
end
define :cymbal do
  sleep 13
  with_fx :flanger do
    r = (rrand 1.5, 3.5)
    g= (rrand 1, 2)
    sample :drum_cymbal_hard, amp:r, sustain:g
    print r
    # Number 11, the sustain for the sample will be randomized from the values 1 to 2
    #Number 11, the amp for the sample will be randomized because it is linked to the variable "r" which will randomly pick a rate value from 1.5 to 3.5. Then it will print the r value on the log
  end
end
define :vocal do
  sleep 13
  sound = [force, obi, luke, father, withyou].choose
  # Number 11, will randomly choose one of the variable samples to play it
  sample sound, amp:8
end


#Below is Number 7 where my functions are actually playing concurrently
live_loop :track1 do
  melody #Number 6, this melody will play by itself for 2 times then I will let the other tracks play that are in the live loop
end
live_loop :track2 do
  sync :track1
  background
end
live_loop :track3 do
  sync :track1
  ending_notes
end
live_loop :track4 do
  sync :track1
  bass
end
live_loop :track5 do
  sync :track1
  cymbal
end
live_loop :track6 do
  sync :track1
  vocal
end


#Below is where I will stop the functions from play and then transition to the next song
=begin
live_loop :track1 do
  stop
end
live_loop :track2 do
  stop
end
live_loop :track3 do
  stop
end
live_loop :track4 do
  stop
end
live_loop :track5 do
  stop
end
live_loop :track6 do
  stop
end
=end
